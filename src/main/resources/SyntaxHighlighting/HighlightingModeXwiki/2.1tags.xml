<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>SyntaxHighlighting</web>
  <name>HighlightingModeXwiki/2.1tags</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1428667612000</creationDate>
  <parent>SyntaxHighlighting.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1429293624000</date>
  <contentUpdateDate>1429180932000</contentUpdateDate>
  <version>1.1</version>
  <title>XWiki 2.1 Tags Syntax Highlighting Mode</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>Defines the "xwiki/2.1tags" [[CodeMirror&gt;&gt;http://codemirror.net/]] mode.

Handles the XWiki syntax itself.</content>
  <object>
    <name>SyntaxHighlighting.HighlightingModeXwiki/2\.1tags</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>3ba0e177-70c7-40cd-b8af-47638134dafc</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define(['SyntaxHighlighting_cm/lib/codemirror'], function (CodeMirror) {
  CodeMirror.defineMode("xwiki/2.1tags", function(config, parserConfig) {
    var indentUnit = config.indentUnit;
    var multilineTagIndentFactor = parserConfig.multilineTagIndentFactor || 1;

    var Kludges = {
      autoSelfClosers: {},
      implicitlyClosed: {},
      contextGrabbers: {},
      doNotIndent: {},
      allowUnquoted: false,
      allowMissing: false
    };

    // Return variables for tokenizers
    var tagName, type;

    function inText(stream, state) {
      function chain(parser) {
        state.tokenize = parser;
        return parser(stream, state);
      }

      var ch = stream.next();
      if (ch == "{" &amp;&amp; stream.eat("{")) {
        var isClose = stream.eat("/");
        tagName = "";
        var c;
        while ((c = stream.eat(/[^\s\u00a0={}\"\'\/?]/))) tagName += c;
        if (!tagName) return "error";
        type = isClose ? "closeTag" : "openTag";
        state.tokenize = inTag;
        return "tag";
      } else {
        // Wiki syntax parsing should go here.

        stream.eatWhile(/[^&amp;{]/);
        return null;
      }
    }

    function inTag(stream, state) {
      var ch = stream.next();
      if ( (ch == "}" &amp;&amp; stream.eat("}")) || (ch == "/" &amp;&amp; stream.eat("}") &amp;&amp; stream.eat("}")) ) {
        state.tokenize = inText;
        type = ch == "}" ? "endTag" : "selfcloseTag";
        return "tag";
      } else if (ch == "=") {
        type = "equals";
        return null;
      } else if (ch == "{") {
        return "error";
      } else if (/[\'\"]/.test(ch)) {
        state.tokenize = inAttribute(ch);
        return state.tokenize(stream, state);
      } else {
        stream.eatWhile(/[^\s\u00a0={}\"\'\/?]/);
        return "word";
      }
    }

    function inAttribute(quote) {
      return function(stream, state) {
        while (!stream.eol()) {
          if (stream.next() == quote) {
            state.tokenize = inTag;
            break;
          }
        }
        return "string";
      };
    }

    function inBlock(style, terminator) {
      return function(stream, state) {
        while (!stream.eol()) {
          if (stream.match(terminator)) {
            state.tokenize = inText;
            break;
          }
          stream.next();
        }
        return style;
      };
    }

    var curState, curStream, setStyle;
    function pass() {
      for (var i = arguments.length - 1; i &gt;= 0; i--) curState.cc.push(arguments[i]);
    }
    function cont() {
      pass.apply(null, arguments);
      return true;
    }

    function pushContext(tagName, startOfLine) {
      var noIndent = Kludges.doNotIndent.hasOwnProperty(tagName) || (curState.context &amp;&amp; curState.context.noIndent);
      curState.context = {
        prev: curState.context,
        tagName: tagName,
        indent: curState.indented,
        startOfLine: startOfLine,
        noIndent: noIndent
      };
    }
    function popContext() {
      if (curState.context) curState.context = curState.context.prev;
    }

    function element(type) {
      if (type == "openTag") {
        curState.tagName = tagName;
        curState.tagStart = curStream.column();
        return cont(attributes, endtag(curState.startOfLine));
      } else if (type == "closeTag") {
        var err = false;
        if (curState.context) {
          if (curState.context.tagName != tagName) {
            if (Kludges.implicitlyClosed.hasOwnProperty(curState.context.tagName.toLowerCase())) {
              popContext();
            }
            err = !curState.context || curState.context.tagName != tagName;
          }
        } else {
          err = true;
        }
        if (err) setStyle = "error";
        return cont(endclosetag(err));
      }
        return cont();
    }
    function endtag(startOfLine) {
      return function(type) {
        var tagName = curState.tagName;
        curState.tagName = curState.tagStart = null;
        if (type == "selfcloseTag" ||
            (type == "endTag" &amp;&amp; Kludges.autoSelfClosers.hasOwnProperty(tagName.toLowerCase()))) {
          maybePopContext(tagName.toLowerCase());
          return cont();
        }
        if (type == "endTag") {
          maybePopContext(tagName.toLowerCase());
          pushContext(tagName, startOfLine);
          return cont();
        }
        return cont();
      };
    }
    function endclosetag(err) {
      return function(type) {
        if (err) setStyle = "error";
        if (type == "endTag") { popContext(); return cont(); }
        setStyle = "error";
        return cont(arguments.callee);
      };
    }
    function maybePopContext(nextTagName) {
      var parentTagName;
      while (true) {
        if (!curState.context) {
          return;
        }
        parentTagName = curState.context.tagName.toLowerCase();
        if (!Kludges.contextGrabbers.hasOwnProperty(parentTagName) ||
            !Kludges.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {
          return;
        }
        popContext();
      }
    }

    function attributes(type) {
      if (type == "word") {setStyle = "attribute"; return cont(attribute, attributes);}
      if (type == "endTag" || type == "selfcloseTag") return pass();
      setStyle = "error";
      return cont(attributes);
    }
    function attribute(type) {
      if (type == "equals") return cont(attvalue, attributes);
      if (!Kludges.allowMissing) setStyle = "error";
      else if (type == "word") setStyle = "attribute";
        return (type == "endTag" || type == "selfcloseTag") ? pass() : cont();
    }
    function attvalue(type) {
      if (type == "string") return cont(attvaluemaybe);
      if (type == "word" &amp;&amp; Kludges.allowUnquoted) {setStyle = "string"; return cont();}
      setStyle = "error";
      return (type == "endTag" || type == "selfCloseTag") ? pass() : cont();
    }
    function attvaluemaybe(type) {
      if (type == "string") return cont(attvaluemaybe);
      else return pass();
    }

    return {
      startState: function() {
        return {tokenize: inText, cc: [], indented: 0, startOfLine: true, tagName: null, tagStart: null, context: null};
      },

      token: function(stream, state) {
        if (!state.tagName &amp;&amp; stream.sol()) {
          state.startOfLine = true;
          state.indented = stream.indentation();
        }
        if (stream.eatSpace()) return null;

        setStyle = type = tagName = null;
        var style = state.tokenize(stream, state);
        state.type = type;
        if ((style || type) &amp;&amp; style != "comment") {
          curState = state; curStream = stream;
          while (true) {
            var comb = state.cc.pop() || element;
            if (comb(type || style)) break;
          }
        }
        state.startOfLine = false;
        return setStyle || style;
      },

      indent: function(state, textAfter, fullLine) {
        var context = state.context;
        if ((state.tokenize != inTag &amp;&amp; state.tokenize != inText) ||
            context &amp;&amp; context.noIndent)
          return fullLine ? fullLine.match(/^(\s*)/)[0].length : 0;
        if (state.tagName) return state.tagStart + indentUnit * multilineTagIndentFactor;
        if (context &amp;&amp; /^\{\{\//.test(textAfter))
          context = context.prev;
        while (context &amp;&amp; !context.startOfLine)
          context = context.prev;
        if (context) return context.indent + indentUnit;
        else return 0;
      },

      compareStates: function(a, b) {
        if (a.indented != b.indented || a.tagName != b.tagName) return false;
        for (var ca = a.context, cb = b.context; ; ca = ca.prev, cb = cb.prev) {
          if (!ca || !cb) return ca == cb;
          if (ca.tagName != cb.tagName) return false;
        }
      },

      electricChars: "/",
      blockCommentStart: "{{comment}}",
      blockCommentEnd: "{{/comment}}",
    };
  });
});</code>
    </property>
    <property>
      <name>xwikitags.js - XWiki syntax mode based on xml.js</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
